01======>>>>>>
class Solution {
public: 
    ListNode* removeElements(ListNode* head, int val) {
        if(head== NULL)
        {
            return head;
        }
       ListNode* temp=head;
      while(temp->next!= NULL)
      {          
          if(temp->next->val == val)
          {   
            ListNode* deleteNode = temp->next;  
            temp->next = temp->next->next; 
             delete  deleteNode;
          }
          else if(temp->val == val)
          {   
            ListNode* deleteNode = temp;  
            // temp->next = temp->next->next; 
             delete  deleteNode;
          }
          else 
          {
                temp = temp->next;  
          }                    
      }
        return head;
    }
};



02======>>>>>>

class Solution {
public:
    int size(ListNode* head)
    {
        ListNode* tmp = head;
        int cnt = 0;

        while(tmp != NULL)
        {
            cnt++;
            tmp = tmp->next;
        }

        return cnt;
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int pos = size(head) - n;

        ListNode* tmp = head;

        if(pos == 0)
        {
            head = head->next;
            return head;
        }

        for(int i = 0; i < pos - 1; i++)
        {
            tmp = tmp->next;
        }

        if(tmp != NULL && tmp->next != NULL)
        {
            tmp->next = tmp->next->next;
        }

        return head;
    }
};


3==============>


class Solution {
public:
    int size(ListNode* head)
    {
        ListNode* tmp = head;

        int cnt = 0;

        while(tmp != NULL)
        {
            cnt++;
            tmp = tmp->next;
        }

        return cnt;
    }
    ListNode* swapNodes(ListNode* head, int k) {
        int total = size(head);
        int pos_back = total - k;
        pos_back++;

        ListNode* firstNode = NULL;
        ListNode* secondNode = NULL;

        ListNode* tmp = head;

        for(int i = 1; i <= total; i++)
        {
            if(i == k)
            {
                firstNode = tmp;
            }
            if(i == pos_back)
            {
                secondNode = tmp;
            }

            tmp = tmp->next;
        }

        swap(firstNode->val, secondNode->val);

        return head;
    }
};

(04)================>>>>>>>

class Solution {
public:
    ListNode* mergeNodes(ListNode* head) {
        bool start = false;

        ListNode* tmp = head;
        ListNode* ans = NULL;
        ListNode* ans_tmp = NULL;
        long long sum = 0;

        while(tmp != NULL)
        {
            if(start == false && tmp->val == 0)
            {
                start = true;
            }
            else if(start == true && tmp->val == 0)
            {
                if(ans == NULL)
                {
                    ans = new ListNode(sum);
                    ans_tmp = ans;
                }
                else
                {
                    ans_tmp->next = new ListNode(sum);
                    ans_tmp = ans_tmp->next;
                }

                sum = 0;
            }
            else
            {
                sum += tmp->val;
            }

            tmp = tmp->next;
        }

        return ans;
    }
};
Samiun
Samiun Black
4
